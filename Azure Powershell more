Assign-AzPublicIP.ps1
Assign-RBACRoleToScriptions.ps1
Copy-AzNSGSecurityRules.ps1
Create-Azps1
Create-NewAzSqlDatabase.ps1
Demo-Tags.ps1
Enable-AzureStaticWebsiteFeature.ps1
Enable-ManagedIdentitiesForAzureKeyVault.ps1
Find-AzResource.ps1
Get-ARMVMPIP.ps1
Get-AzVMCreateDate.ps1
Get-AzVMImageReferance.ps1
Get-AzVMImageSku2.ps1


# Assign-AzPublicIP.ps1

# Assigns a public IP address to a network interface.

# Parameters (Example - adjust as needed for your script)
# [CmdletBinding()]
# Param(
#     [Parameter(Mandatory=$true, HelpMessage="Name of the Resource Group"),
#     [string]$ResourceGroupName,
#     [Parameter(Mandatory=$true, HelpMessage="Name of the Network Interface"),
#     [string]$NetworkInterfaceName,
#     [Parameter(Mandatory=$true, HelpMessage="Name of the Public IP Address"),
#     [string]$PublicIpAddressName
# )

# Get the Public IP Address
$PublicIP = Get-AzPublicIpAddress -Name $PublicIpAddressName -ResourceGroupName $ResourceGroupName

# Get the Network Interface
$NIC = Get-AzNetworkInterface -Name $NetworkInterfaceName -ResourceGroupName $ResourceGroupName

# Assign the Public IP to the Network Interface
$NIC.IpConfigurations[0].PublicIpAddress = $PublicIP

# Update the Network Interface
Set-AzNetworkInterface -NetworkInterface $NIC

Write-Host "Public IP '$PublicIpAddressName' assigned to Network Interface '$NetworkInterfaceName' in Resource Group '$ResourceGroupName'." -ForegroundColor Green

# Assign-RBACRoleToScriptions.ps1

# Assigns an RBAC role to a principal (user, group, or service principal) at the subscription scope.

# Parameters (Example)
# [CmdletBinding()]
# Param(
#     [Parameter(Mandatory=$true, HelpMessage="Subscription ID"),
#     [string]$SubscriptionId,
#     [Parameter(Mandatory=$true, HelpMessage="Principal ID (Object ID of user, group, or service principal)"),
#     [string]$PrincipalId,
#     [Parameter(Mandatory=$true, HelpMessage="Role Definition Name (e.g., 'Contributor', 'Reader')"),
#     [string]$RoleDefinitionName
# )

# Select the subscription
Set-AzContext -SubscriptionId $SubscriptionId

# Get the Role Definition
$RoleDefinition = Get-AzRoleDefinition -Name $RoleDefinitionName

# Create the Role Assignment
New-AzRoleAssignment -ObjectId $PrincipalId -RoleDefinitionId $RoleDefinition.Id -Scope "/subscriptions/$SubscriptionId"

Write-Host "Role '$RoleDefinitionName' assigned to Principal '$PrincipalId' on Subscription '$SubscriptionId'." -ForegroundColor Green

# Copy-AzNSGSecurityRules.ps1

# Copies security rules from one Network Security Group (NSG) to another.

# Parameters (Example)
# [CmdletBinding()]
# Param(
#     [Parameter(Mandatory=$true, HelpMessage="Name of the source Resource Group"),
#     [string]$SourceResourceGroupName,
#     [Parameter(Mandatory=$true, HelpMessage="Name of the source NSG"),
#     [string]$SourceNSGName,
#     [Parameter(Mandatory=$true, HelpMessage="Name of the destination Resource Group"),
#     [string]$DestinationResourceGroupName,
#     [Parameter(Mandatory=$true, HelpMessage="Name of the destination NSG"),
#     [string]$DestinationNSGName
# )

# Get the source NSG
$SourceNSG = Get-AzNetworkSecurityGroup -ResourceGroupName $SourceResourceGroupName -Name $SourceNSGName

# Get the destination NSG
$DestinationNSG = Get-AzNetworkSecurityGroup -ResourceGroupName $DestinationResourceGroupName -Name $DestinationNSGName

# Copy the security rules
foreach ($Rule in $SourceNSG.SecurityRules) {
    $DestinationNSG | Add-AzNetworkSecurityRuleConfig -Name $Rule.Name -Protocol $Rule.Protocol -SourcePortRange $Rule.SourcePortRange -DestinationPortRange $Rule.DestinationPortRange -SourceAddressPrefix $Rule.SourceAddressPrefix -DestinationAddressPrefix $Rule.DestinationAddressPrefix -Access $Rule.Access -Priority $Rule.Priority -Direction $Rule.Direction -Description $Rule.Description
}

# Update the destination NSG
Set-AzNetworkSecurityGroup -NetworkSecurityGroup $DestinationNSG

Write-Host "Security rules copied from NSG '$SourceNSGName' to NSG '$DestinationNSGName'." -ForegroundColor Green

# Create-Azps1

# Creates a new resource group.

# Parameters (Example)
# [CmdletBinding()]
# Param(
#     [Parameter(Mandatory=$true, HelpMessage="Name of the Resource Group to create"),
#     [string]$ResourceGroupName,
#     [Parameter(Mandatory=$true, HelpMessage="Location for the Resource Group (e.g., 'eastus')"),
#     [string]$Location
# )

# Create the Resource Group
New-AzResourceGroup -Name $ResourceGroupName -Location $Location

Write-Host "Resource Group '$ResourceGroupName' created in '$Location'." -ForegroundColor Green

# Create-NewAzSqlDatabase.ps1

# Creates a new Azure SQL Database.

# Parameters (Example)
# [CmdletBinding()]
# Param(
#     [Parameter(Mandatory=$true, HelpMessage="Name of the Resource Group"),
#     [string]$ResourceGroupName,
#     [Parameter(Mandatory=$true, HelpMessage="Name of the SQL Server"),
#     [string]$SqlServerName,
#     [Parameter(Mandatory=$true, HelpMessage="Name of the Database to create"),
#     [string]$DatabaseName,
#     [Parameter(Mandatory=$true, HelpMessage="Edition of the Database (e.g., 'Basic', 'Standard', 'GeneralPurpose')"),
#     [string]$DatabaseEdition
# )

# Create the SQL Database
New-AzSqlDatabase -ResourceGroupName $ResourceGroupName -ServerName $SqlServerName -DatabaseName $DatabaseName -Edition $DatabaseEdition

Write-Host "Database '$DatabaseName' created on SQL Server '$SqlServerName'." -ForegroundColor Green

# Demo-Tags.ps1

# Demonstrates how to add and remove tags from a resource.

# Parameters (Example)
# [CmdletBinding()]
# Param(
#     [Parameter(Mandatory=$true, HelpMessage="Resource ID of the resource to tag"),
#     [string]$ResourceId
# )

# Get the resource
$Resource = Get-AzResource -ResourceId $ResourceId

# Add tags
$Tags = @{"Environment"="Development"; "Owner"="User"}
$Resource = Set-AzResource -ResourceId $ResourceId -Tag $Tags
Write-Host "Tags added to resource." -ForegroundColor Green

# Remove a tag
$TagsToRemove = "Owner"
$Resource = Set-AzResource -ResourceId $ResourceId -Tag @{ } -RemoveTag $TagsToRemove
Write-Host "Tag 'Owner' removed from resource." -ForegroundColor Green

# Enable-AzureStaticWebsiteFeature.ps1

# Enables the static website feature on a storage account.

# Parameters (Example)
# [CmdletBinding()]
# Param(
#     [Parameter(Mandatory=$true, HelpMessage="Name of the Resource Group"),
#     [string]$ResourceGroupName,
#     [Parameter(Mandatory=$true, HelpMessage="Name of the Storage Account"),
#     [string]$StorageAccountName,
#     [Parameter(Mandatory=$true, HelpMessage="Name of the index document"),
#     [string]$IndexDocument,
#     [Parameter(Mandatory=$true, HelpMessage="Name of the error document"),
#     [string]$ErrorDocument
# )

# Get the Storage Account
$StorageAccount = Get-AzStorageAccount -ResourceGroupName $ResourceGroupName -Name $StorageAccountName

# Enable static website
$StorageAccount.EnableAzureStorageWebSite = $true
$StorageAccount.PrimaryEndpoints.Web = "https://" + $StorageAccountName + ".z[region].web.core.windows.net" # Adjust [region] accordingly

# Set index and error document
$StorageAccount.IndexDocument = $IndexDocument
$StorageAccount.ErrorDocument404Path = $ErrorDocument

# Update the Storage Account
Set-AzStorageAccount -StorageAccount $StorageAccount

Write-Host "Static website enabled for Storage Account '$StorageAccountName'." -ForegroundColor Green

# Enable-ManagedIdentitiesForAzureKeyVault.ps1

# Enables Managed Identities for a resource and grants it access to an Azure Key Vault.

# Parameters (Example)
# [CmdletBinding()]
# Param(
#     [Parameter(Mandatory=$true, HelpMessage="Resource ID of the resource (e.g., VM, App Service)"),
#     [string]$ResourceId,
#     [Parameter(Mandatory=$true, HelpMessage="Name of the Key Vault"),
#     [string]$KeyVaultName
# )

# Enable system-assigned managed identity
Update-AzResource -ResourceId $ResourceId -PropertyObject @{identity=@{type='SystemAssigned'}}

# Get the principal ID of the managed identity
$Resource = Get-AzResource -ResourceId $ResourceId
$PrincipalId = $Resource.Identity.PrincipalId

# Get the Key Vault
$KeyVault = Get-AzKeyVault -VaultName $KeyVaultName

# Grant access to the Key Vault
Set-AzKeyVaultAccessPolicy -VaultName $KeyVaultName -ObjectId $PrincipalId -PermissionsToSecrets get,list -PermissionsToKeys get,list

Write-Host "Managed Identity enabled and granted access to Key Vault '$KeyVaultName'." -ForegroundColor Green

# Find-AzResource.ps1

# Finds Azure resources based on various criteria.

# Parameters (Example)
# [CmdletBinding()]
# Param(
#     [Parameter(Mandatory=$false, HelpMessage="Resource Group Name (optional)"),
#     [string]$ResourceGroupName,
#     [Parameter(Mandatory=$false, HelpMessage="Resource Name (optional)"),
#     [string]$ResourceName,
#     [Parameter(Mandatory=$false, HelpMessage="Resource Type (optional)"),
#     [string]$ResourceType
# )

# Find resources
if ($ResourceGroupName) {
    if ($ResourceName) {
        Get-AzResource -ResourceGroupName $ResourceGroupName -Name $ResourceName
    } else {
        Get-AzResource -ResourceGroupName $ResourceGroupName
    }
} else {
    if ($ResourceType) {
        Get-AzResource -ResourceType $ResourceType
    } else {
        Get-AzResource
    }
}

# Get-ARMVMPIP.ps1

# Gets the Public IP Address of an Azure Resource Manager (ARM) Virtual Machine.

# Parameters (Example)
# [CmdletBinding()]
# Param(
#     [Parameter(Mandatory=$true, HelpMessage="Name of the Resource Group"),
#     [string]$ResourceGroupName,
#     [Parameter(Mandatory=$true, HelpMessage="Name of the Virtual Machine"),
#     [string]$VMName
# )

# Get the Virtual Machine
$VM = Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VMName

# Get the Public IP Address
$PublicIP = (Get-AzPublicIpAddress -ResourceGroupName $VM.ResourceGroupName -Name (Get-AzNetworkInterface -ResourceGroupName $VM.ResourceGroupName -Name $VM.NetworkProfile.NetworkInterfaces[0].Id.Split('/')[-1]).IpConfigurations[0].PublicIpAddress.Id.Split('/')[-1]).IpAddress

Write-Host "Public IP Address for VM '$VMName' is: $PublicIP" -ForegroundColor Green

# Get-AzVMCreateDate.ps1

# Gets the creation date of an Azure Virtual Machine.

# Parameters (Example)
# [CmdletBinding()]
# Param(
#     [Parameter(Mandatory=$true, HelpMessage="Name of the Resource Group"),
#     [string]$ResourceGroupName,
#     [Parameter(Mandatory=$true, HelpMessage="Name of the Virtual Machine"),
#     [string]$VMName
# )

# Get the Virtual Machine
$VM = Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VMName

# Get the Creation Date (from the timestamp of the VM ID)
$CreationDate = [datetime]::ParseExact($VM.Id.Split('/')[4].Substring(0,8), "yyyyMMdd", $null)

Write-Host "VM '$VMName' was created on: $CreationDate" -ForegroundColor Green

# Get-AzVMImageReferance.ps1

# Gets the image reference information for a Virtual Machine.

# Parameters (Example)
# [CmdletBinding()]
# Param(
#     [Parameter(Mandatory=$true, HelpMessage="Name of the Resource Group"),
#     [string]$ResourceGroupName,
#     [Parameter(Mandatory=$true, HelpMessage="Name of the Virtual Machine"),
#     [string]$VMName
# )

# Get the Virtual Machine
$VM = Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VMName

# Get the Image Reference
$ImageReference = $VM.StorageProfile.ImageReference

# Display the Image Reference
Write-Host "Image Publisher: $($ImageReference.Publisher)"
Write-Host "Image Offer: $($ImageReference.Offer)"
Write-Host "Image Sku: $($ImageReference.Sku)"
Write-Host "Image Version: $($ImageReference.Version)"

# Get-AzVMImageSku2.ps1

# Gets the available SKUs for a Virtual Machine image.

# Parameters (Example)
# [CmdletBinding()]
# Param(
#     [Parameter(Mandatory=$true, HelpMessage="Location (e.g., 'eastus')"),
#     [string]$Location,
#     [Parameter(Mandatory=$true, HelpMessage="Publisher Name (e.g., 'Canonical')"),
#     [string]$PublisherName,
#     [Parameter(Mandatory=$true, HelpMessage="Offer (e.g., 'UbuntuServer')"),
#     [string]$Offer
# )

# Get the image SKUs
Get-AzVMImageSku -Location $Location -PublisherName $PublisherName -Offer $Offer
